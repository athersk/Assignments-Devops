First, Install Docker on your Linux System 

Task-1
1)	Pull the ubuntu (ubuntu:latest) image & Run image by giving name ubuntu-test1 also allow to be interactive mode for execute bash script.
2)	Go inside ubuntu-test1 container  and Check the ubuntu OS version
3)	Run Update command on ubuntu-test1
4)	Install packages httpd and vim
5)	Create a new file “index.html”  on location -> /var/www/html/
6)	Paste the highlighted content into index.html ->  <h1> Hello from Ubuntu-Httpd server </h1>   
7)	Now try to start/enable the httpd service and also check the browser for running httpd server page. 
8)	stop the ubuntu-test1 container

=====================================================
Task-2
1)	Pull nginx  latest image and Run it by giving name webserver-1 also assign port No 80 for nginx service.
2)	Check nginx on browser by using [YourSystemipAddress:AssignedPortNo] for its running  home page. 
3)	Run the “docker container --help"  for learn the Administrative command of docker.
4)	How to Check/fetch the logs of Running container. 
5)	Do not stop the container Explain, how does background process works when you hit “docker run” command
6)	What are the command options for interative tertminal, name, port expose, port publish, environment  and detached mode while running “docker run” commands
7)	What are the difference between publish and expose for port in “docker run” commands.
8)	What are the difference between and also Explain the following command – “docker ps” and “docker ps –a” write down each field from any one of them
9)	Remove all running as well stopped containers.
10)	Verify it removed give command name.
=====================================================

Task-3 : Manage Multiple container at a time
1)	Run nginx, mysql and httpd(apache) server by following below mentioned instructions
-	Run all of them with command options with detached mode, and give name to them
-	Nginx should be listen on 81:80, httpd on 82:80, mysql on 3306:3306
-	When running mysql, use the – environment option  or “ –e “  to pass in MYSQL_RANDOM_ROOT_PASSWORD=yes 
-	User “docker container logs” on mysql to find the random password it created on startup
-	remove containers forcefully

=====================================================
Task-4: Process Monitoring – for check what`s going on in container 
1)	docker container top – process list in one container
2)	docker container inspect – details of one container config
3)	docker container stats – performance stats for all containers
By using above mentioned process monitoring command check the stats, inspect and process list in the running container. Make new containers for list as mentioned below.
-	Nginx
-	Mysql
Note : for creating both container please follow the Task-3 for Attributes.
=============================================
Task-5:  shell inside running  containers
Usage for:
-	Docker container run –it  -> start new container interactively
-	Docker container exec –it  -> run additional command in existing container 

1)	Pull new image of Linux distribution OS named “alpine” as  latest
2)	Create container as interactive, give name and also assign “sh” (shell) mode to get inside the container
3)	 Try to update package  with “apk” and also install curl software – package manager is “apk”
Exit from container and stop it.
=====================================================
Task-6 : Docker Networks
-	 For Show network -> $ docker network ls
-	For  Inspect a network -> $ docker network Inspect
-	For  Create own  network -> $ docker network Create <yourNwName>
-	For  Attach a network to container -> $ docker network connect 
-	For Detach a network from container -> $ docker network disconnect 

1)	Create one bridge network name “my_net”
2)	Create nginx container and Assign it to  “my_net” network
3)	Inspect nginx container  for new Assigned “my_net” network
4)	Assign default bridge network to nginx container
5)	At last detach “my_net” network from container, there should be remain one default bridge network to nginx container
6)	Check ping for another running container with different network & ip address  and also for ContainerName as well

=====================================================
Task-7 : Dockerfile to buid own/custom  images
-	Understand the concept of Dockerfile and how to write it.
-	Signup with dockerhub site with your mail.
-	Check the administrative commands to build, tag, push the image
[Beginners Level]
1)	Write a Dockerfile for building a ubuntu custom image containing with a file “testfile” on location /tmp/testfile 
2)	Content would be in testfile -> Hello my Name is XYZ
3)	Give Name with tag and build it on current location
4)	Run custom image and check for the testfile
5)	Remove your build image from your system 
6)	Try to run the container by pulling image and verify the custom changes.

=================================================================

Task-8 : Persistent storage [Volumes  &&  Bind mount]

-	Please Gather information on Persistent storage (Volumes and  Bind mount)
INFO: persistent storage stands for data of your Application can be saved on storage location that will be remain after deletetion /crashed state of your Application 
For Solution, Docker has given two main ways to do it i.e Volumes and  Bind mount

Volume: 
-	 we need to first create volumes manually and assigned it to container at the time of container creation. [$ docker volume create mytestvol-1]
-	Storage Location or Mount Point of new created volume will be dockers filesystem -> “/var/lib/docker/volumes/<YourCreatedVolumeName>/_data” for same you can inspect by newly created volume.
-	Assignment of Volume to container [$ -v mytestvol-1:/path of/ container/ volume ] just add this section while creating your new container.

Bind Mount:
-	Just need a specific directory in a local and other thing will remain same. 
-	Assignment of Bind Mount to container [$ -v $(pwd):/path of/ container/volume ] just add this section while creating your new container.
-	It will map the both directory and we can commit changes without going inside the container, the specific directory will be our entrance to access the container files.

1)	Try to create Jenkins container with each Persistent storage type 
2)	Container name will be jenkins1  port 8080:8080, 50000: 50000 and jenkins2 port will be 8081:8080, 50001: 50000
3)	Container`s volume location will be - > /var/jenkins_home 
4)	You can verify the details from site -> https://hub.docker.com/_/jenkins

=================================================================
